import java.util.*;

public class Solution {
	public void wallsAndGates(int[][] rooms) {
	    for (int i = 0; i < rooms.length; i++)
	        for (int j = 0; j < rooms[0].length; j++)
	            if (rooms[i][j] == 0) dfs(rooms, i, j, 0);
	}

	private void dfs(int[][] rooms, int i, int j, int d) {
	    if (i < 0 || i >= rooms.length || j < 0 || j >= rooms[0].length || rooms[i][j] < d) return;
	    rooms[i][j] = d;
	    dfs(rooms, i - 1, j, d + 1);
	    dfs(rooms, i + 1, j, d + 1);
	    dfs(rooms, i, j - 1, d + 1);
	    dfs(rooms, i, j + 1, d + 1);
	}
	public void wallsAndGatesBFS(int[][] rooms) {
	        LinkedList<int[]> list = new LinkedList<int[]>();
	        for(int i = 0; i < rooms.length; i++) {
	            for(int j = 0; j < rooms[0].length; j++) {
	                if(rooms[i][j] == 0) 
	                    list.add(new int[]{i,j});
	            }
	        }
	        int[][] diff = new int[][]{{-1,0,1,0},{0,1,0,-1}};
	        while(!list.isEmpty()) {
	            int[] pop = list.remove();
	            for(int i = 0; i < diff[0].length; i++) {
	                int newR = pop[0] + diff[0][i];
	                int newC = pop[1] + diff[1][i];
	                //if the cell is out of boundary or was visited before, continue;
	                if(newR < 0 || newR >= rooms.length || newC < 0 || newC >= rooms[0].length || 
	                    rooms[newR][newC] != Integer.MAX_VALUE) 
	                    continue;
	                rooms[newR][newC] = rooms[pop[0]][pop[1]] + 1;
	                list.add(new int[]{newR, newC});
	            }
	        }
	    }
}
